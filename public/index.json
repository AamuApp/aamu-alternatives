[{"content":"How to create a blog with Aamu.app? Here is how I have done it for Aamu.app‚Äôs official blog at https://aamu.app/blog/.\nThe ingredients of this blog are:\nA database at Aamu.app\nFor writing the blog posts: documents at Aamu.app\nFor creating the actual blog: Hugo static site generator\nA server (with a shell access) to host the blog\nGit to publish the blog to the server (pushing the repo)\nNginx for serving the static site (git repo)\nYou can also use some other method to host the blog, for example Netlify. With this method you don‚Äôt need a server nor git. You can see the source code for the blog at https://github.com/AamuApp/aamu-blog.\nThe IdeaThe general idea goes like this:\nCreate a databaseCreate a database at Aamu.app with the provided template aamu-blog:\nYou would use this database as what is known as a ‚ÄúHeadless CMS‚Äù ‚Äî the data from the database can be retrieved from the Aamu.app‚Äôs GraphQL database API.\nInside the database you will see two tables: Blog post and Person. If you are not happy with the names, you can rename them. The table Blog post is for posts (üßê) and Person is for post authors. You should first create a row in Person which you can then link into your posts:\nThen create a row into Blog post table and fill the data accordingly. Body field will contain the blog posts HTML code. You can write the blog posts with Docs feature at Aamu.app, which we will get to next.\nHere‚Äôs a row for a blog post. ‚ÄúSlug‚Äù is the url component of the post.\nWhen you want to start writing the post, click the Body field of the row. You can write (copy-paste) HTML directly, or attach a Doc. Let‚Äôs attach a Doc:\nThis will get us to the next phase.\nWriting the blog postWe will use the Docs feature to write the blog post (just as I‚Äôm doing now). Writing a doc will automatically save the HTML code to the database‚Äôs Body field. So, writing the blog post is extremely easy.\nYou can also copy-paste the HTML to the Body field, if you want to write it with some other method.\nWhen you are ready to publish the blog post, set the publishing date, author, possibly ‚ÄúHero‚Äù image and any tags you would want, and set the status to ‚ÄúPublished‚Äù.\nCreating the blog with HugoLet‚Äôs create the actual blog now. The idea goes like this:\nThe build script retrieves blog posts from Aamu.app through the GraphQL API. The script knows the timestamp when it did this the last time (the timestamp is saved into a file) and only gets the updated/new blog posts.\nThe same script saves them into content files, as well as any images.\nHugo is run to convert the content files into a blog\nThe source code, which we use for our blog, is at https://github.com/AamuApp/aamu-blog. You can use it as a starting point for your own blog, or just get ideas from it.\nYou would typically use a development machine to create the blog and then upload (possibly with git) into the hosting server. You can also do all of this at a service like Netlify. If you want to use a service, they can usually be triggered to build the blog with a build hook. You can create such a build hook at your Aamu.app database‚Äôs settings: Publishing the blogStill one thing to do: to actually publish the blog at the hosting server.\nAt the simplest, this can be done by uploading what Hugo created to the server. I have set up a git bare repo, with a post-receive hook, which handles the uploading part. Using git with a ‚Äúbare repo‚Äù is a handy way to do this, but a bit more complex.\nThat‚Äôs It!Let us know if there was something that left you wondering - how could I improve this tutorial?\n","permalink":"http://localhost:1313/blog/posts/creating-a-blog-with-aamuapp/","summary":"\u003cp\u003eHow to create a blog with Aamu.app? Here is how I have done it for Aamu.app‚Äôs official blog at \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://aamu.app/blog/\"\u003ehttps://aamu.app/blog/\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eThe ingredients of this blog are:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cp\u003eA database at Aamu.app\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003eFor writing the blog posts: documents at Aamu.app\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003eFor creating the actual blog: \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://gohugo.io/\" id=\"3cc0064a-8cad-48d6-93df-8f6ff1fd33b7\"\u003eHugo\u003c/a\u003e static site generator\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003eA server (with a shell access) to host the blog\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003eGit to publish the blog to the server (pushing the repo)\u003c/p\u003e","title":"Creating a blog with Aamu.app"},{"content":"Aamu.app database supports two APIs: one for submitting data into the database via standard html forms ‚Äì this works just one direction. Also you can get and put data into the database via GraphQL.\nAs Wikipedia says it :\nGraphQL is an open-source data query and manipulation language.\nIt has a syntax for reading and writing the database. For testing it out, it is helpful to have a tool. I like Altair .\nTo use Altair or any similar tool you first need to setup it with the database endpoint and the database API key. The database endpoint is:\nhttps://api.aamu.app/api/v1/graphql/ You can get the API key from your database settings.\nQuerying the database Let\u0026rsquo;s assume we are using the database aamu-blog, which is the actual database which holds the blog posts you are reading now! The database looks like this in Aamu.app (at this moment in time there are only two rows, i.e. posts):\nIt has two tables: \u0026ldquo;Blog post\u0026rdquo; and \u0026ldquo;Person\u0026rdquo;. Our GraphQL API will have these fields for this database (you can use for example Altair GrapQL client to see the database schema):\nSo, the GraphQL API will create two fields for each table, one for fetching a single item (by an ID), e.g. BlogPost and one (BlogPostCollection) for fetching many items (by some criteria you define).\nLet\u0026rsquo;s see how to get a single item. This is the query:\nquery { BlogPost (slug: \u0026#34;introduction-to-aamuapp-graphql\u0026#34;) { id created_at updated_at title slug description body status } } When you do the query, you will get the data back (if it exists) as json:\n{ \u0026#34;data\u0026#34;: { \u0026#34;BlogPost\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;3cfa30f8-ab29-459a-ad91-0651ae0b08ad\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2021-10-19T19:11:49.257Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2024-03-09T07:38:23.916Z\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Introduction to Aamu.app GraphQL\u0026#34;, \u0026#34;slug\u0026#34;: \u0026#34;introduction-to-aamuapp-graphql\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;How to use the database from a distance\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Aamu.app database supports two APIs: one for submitting data into the database via standard html forms ‚Äì this works just one direction. Also you can get and put data into the database via GraphQL. ... etc You can also get items by querying the field BlogPostCollection. This gives you multiple rows. You can also do filtering, sorting and pagination.\nLet\u0026rsquo;s see how getting multiple posts goes. Let\u0026rsquo;s get all the blog posts that are published (status is \u0026ldquo;published\u0026rdquo;) and the results will be sorted by creation date (older first):\nquery { BlogPostCollection( filter: { status: { EQ: \u0026#34;published\u0026#34; } } sort: { created_at: DESC } ) { title slug created_at description } } This will give the following results:\n{ \u0026#34;data\u0026#34;: { \u0026#34;BlogPostCollection\u0026#34;: [ { \u0026#34;title\u0026#34;: \u0026#34;Introduction to Aamu.app GraphQL\u0026#34;, \u0026#34;slug\u0026#34;: \u0026#34;introduction-to-aamuapp-graphql\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2021-10-19T09:00:00.000Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;How to use the database from a distance\u0026#34; }, { \u0026#34;title\u0026#34;: \u0026#34;Introduction to Aamu.app\u0026#34;, \u0026#34;slug\u0026#34;: \u0026#34;introduction-to-aamu-app\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2021-10-10T09:00:00.000Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Aamu.app is an all-in-one productivity tool\u0026#34; } ] } } You can use other filtering methods, for example GT (Greater Than):\nquery { BlogPostCollection( filter: { status: { EQ: \u0026#34;published\u0026#34; } updated_at: { GT: \u0026#34;2022-01-04T02:15:37.975Z\u0026#34; } } ) { id created_at updated_at title slug description body heroImage { url } author { name } status tags } } This is the actual query which I\u0026rsquo;m using to create this blog you are reading. This will fetch all the updated blog posts since I ran this last time (since I built the blog last time). I\u0026rsquo;m using Hugo to create this blog, and the blog posts are in Aamu\u0026rsquo;s database and I\u0026rsquo;m writing this using the Aamu\u0026rsquo;s Documents feature.\nNote that there is a field called heroImage, which has a subfield url. You can find all the fields with Altair \u0026rsquo;s Docs feature. It will fetch the database structure and you will see all the fields that you can query (or mutate).\nWith Altair you can also see what kind of filtering you can do. For example, Altair sees that the updated field is a date and will give you the following filtering options:\nYou can get that list by pressing Ctrl-Space.\nYou can also get similar lists in every spot in the query window ‚Äì all the fields and filtering options will be easy to see.\nMutating the database Here we show at how we can mutate database rows.\nAt the moment you can mutate single objects, which are targeted with the `id` field.\nHere we update a database row in our Person table. We will target the row that we want to change with the id field. In Aamu.app, the id field is a string and you can find the correct id by first querying the persons, possibly with some criteria.\nHere is an example mutation query. It will change the title of the person and return some fields that we want to see about the person.\nmutation { Person(id: \u0026#34;29940627-51e8-4fd0-82ab-d718ddfe802f\u0026#34;, title: \u0026#34;Chief Procrastination Officer (CPO)\u0026#34;) { id created_at updated_at name bio title } } ","permalink":"http://localhost:1313/blog/posts/introduction-to-aamuapp-graphql/","summary":"\u003cp\u003eAamu.app database supports two APIs: one for submitting data into the database via standard html forms ‚Äì this works just one direction. Also you can get and put data into the database via GraphQL.\u003c/p\u003e\n\u003cp\u003eAs Wikipedia \u003ca href=\"https://en.wikipedia.org/wiki/GraphQL\"   target=\"_blank\"\u003esays it\u003c/a\u003e\n:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eGraphQL is an open-source data query and manipulation language.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eIt has a syntax for reading and writing the database. For testing it out, it is helpful to have a tool. I like \u003ca href=\"https://altair-gql.sirmuel.design/\"   target=\"_blank\"\u003eAltair\u003c/a\u003e\n.\u003c/p\u003e","title":"Introduction to Aamu.app GraphQL"},{"content":"Working collaboratively can sometimes feel like a mess. Too many apps, scattered chats, docs and tasks all over the place. Aamu.app is here to change that. It‚Äôs an all-in-one tool that brings everything your team needs into one spot, so you can stop juggling and start getting stuff done.\nWhat Makes It Cool? Here‚Äôs why Aamu.app feels like a breath of fresh air ‚õÖÔ∏è :\nAamu.app contains the most often used (by metric chosen by me) SaaS apps in one package. It‚Äôs got tasks tracking (with different views like a kanban board, a synced calendar), chats and posts, document editing, video calls, a helpdesk, emails, graphic design, a form builder and even databases. And what‚Äôs more ‚Äî you can use many of these together ‚Äî compounding their usefulness.\nIt makes collaboration between all of these apps easy. One unified user interface, and basically one app.\nWhether you‚Äôre a tiny crew or a bigger group, it‚Äôs built to cut down on the chaos of using a bunch of different tools.\nPlus, it saves you from paying for a million separate subscriptions.\nüí° Pro-tip: if you are doing some long-term work in a document, you can always open a new tab, so you don‚Äôt have to interrupt the work in any place.\nFeatures So, let‚Äôs take a closer look at the features.\nBut before that, let me say that all the features work by using the keyboard only‚Äîyou rarely need to touch the mouse, unless you want to, of course.\nAnd on top of that, all features and all the data is real-time, and every user can edit everything at the same time ‚Äî the data is automatically synced in real-time, and you will always see the up-to-date version of any data, anywhere.\nSo, those features I promised:\nTasks: Keep track of what needs doing with a kanban board, a list, a calendar or a timeline. There exists an appropriate view for every occasion.\nWork Together, Live: Edit documents as a team without the ‚Äúwhich version is this?‚Äù confusion. It even has Penpot 2.x built in‚Äîa free design tool‚Äîso you don‚Äôt need something like Figma.\nTalk Without the Noise: Chat in groups, post updates, or hop on a video call with LiveKit. It‚Äôs all there, no extra apps required.\nHelpdesk: Got customers? The helpdesk handles live chats and emails, making it easy to stay on top of ‚Äútickets‚Äù.\nDatabases for Anything: Use them for customer tracking, a website, a blog or whatever you need. With GraphQL, you can get the data out (or put it in if you so wish).\nA Form Builder: collect data with a form and store it into the Database.\nCombine them: This blog that you are reading has been written with the Docs and stored in the Database ‚Äî and then built into the real site (with open source tools).\nPricing We are innovative here as well‚Äîyou can pay what you want. Or more appropriately, what you think this is worth for you and how much you can afford to pay. From 0 to as much as you want.\nWe want to test if this model works. It feels fair to us, hopefully it proves to work.\nWhat About That Name? Aamu means ‚Äúmorning‚Äù in Finnish. I think it‚Äôs also quite a beautiful name. And it comes early in the alphabetic. It‚Äôs simple and distinctive. And most people start working in the morning (not me). üòÜ\nShould You Trust This Tool? Absolutely! As the founder, I bring years of experience as an entrepreneur and programmer. My earlier venture, Embed.rocks , has been reliably serving paying customers since 2016, demonstrating our commitment to quality and trust.\nWhat‚Äôs more, there are no major costs involved in running Aamu.app, so it can‚Äôt really go bankrupt.\nAt the moment the service is run by one person only, so that‚Äôs the biggest risk‚Äîif something were to happen to me. When possible, I will take care of this issue too.\n","permalink":"http://localhost:1313/blog/posts/introduction-to-aamu-app/","summary":"\u003cp\u003eWorking collaboratively can sometimes feel like a mess. Too many apps, scattered chats, docs and tasks all over the place. Aamu.app is here to change that. It‚Äôs an all-in-one tool that brings everything your team needs into one spot, so you can stop juggling and start getting stuff done.\u003c/p\u003e\n\u003ch2 id=\"what-makes-it-cool\"\u003eWhat Makes It Cool?\u003c/h2\u003e\n\u003cp\u003eHere‚Äôs why Aamu.app feels like a breath of fresh air ‚õÖÔ∏è :\u003c/p\u003e\n\u003cp\u003eAamu.app contains the most often used (by metric chosen by me) SaaS apps in one package. It‚Äôs got tasks tracking (with different views like a kanban board, a synced calendar), chats and posts, document editing, video calls, a helpdesk, emails, graphic design, a form builder and even databases. And what‚Äôs more ‚Äî you can use many of these together ‚Äî compounding their usefulness.\u003c/p\u003e","title":"Introduction to Aamu.app"}]