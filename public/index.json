[{"content":" This time, let‚Äôs create a simple application, which uses just HTML, JavaScript and Aamu.app‚Äôs database through GraphQL. So, it‚Äôs what is known as a single-page application. The source code for this application (well, one HTML file with some JavaScript in it) is at GitHub. Using this in real lifeA small warning is in order: this uses the database API key, which gives write permissions to the database. So, using this on the public Internet like this is not advised. In those cases you should do the API access on the server side.\nYou can see the general principle here and maybe that will guide you enough into real applications.\nCreate the databaseFirst you need the database at Aamu.app. Conveniently, we have a template for it. You can create a database from the template in here:\nThe AppWe will create a sort of reservation calendar, which accepts entries consisting of a title and a date, and show the current entries as a list. It would look like this:\nThe list of entries is fetched from the database with GraphQL, for which you would need an API KEY, which you can create in the Database Settings.\nA new entry is submitted through the Forms endpoint, which you can also get in the Database Settings. We could also send the form data through GraphQL API, but using the forms endpoint is easy and enough for this application.\nBoth of these should be set in the HTML file, where is says like this:\n// Set these! const API_KEY = ''; 1 \u0026lt; 2 const FORM_ENDPOINT = '';How the GraphQL part works here?So, when the HTML file is loaded into the browser, this happens:\nasync function getData() { try { const response = await fetch('https://api.aamu.app/api/v1/graphql/', { method: 'POST', headers: { 'Content-Type': 'application/json', 'Accept': 'application/json', 'x-api-key': API_KEY }, body: JSON.stringify({ query: ` { Sheet1Collection(sort: { startTime: DESC }) { id created_at updated_at title startTime } } `}) }); if (!response.ok) throw new Error(`HTTP error: ${response.status}`); const data = await response.json(); if (data?.errors) { data.errors.forEach(e =\u0026gt; setError(e.message)); } else if (data?.data) { handleData(data.data); } else { setError('No data returned from API'); } } catch (err) { console.log('Error:', err); } } // Get current data from the calendar (database) getData();So, getData() is called, which fetches the rows from the database (table Sheet1) and then presents the data on the screen (function handleData).\nNote that you can do GraphQL queries very easily, using the Fetch API. You can read more about the syntax of the GraphQL queries here in our blog.\nSending the dataAs told, sending happens through the Forms API. Sharing the Forms API endpoint is safe ‚Äî it can be used only for adding data. That‚Äôs it!There‚Äôs not much more to it: just fetching data from a database and adding data to a database, while showing it on a screen. This was a really simple application.\n","permalink":"https://aamu.app/blog/posts/creating-a-single-page-application-with-aamuapps-database-and-graphql-api/","summary":"\u003cp\u003eThis time, let‚Äôs create a simple application, which uses just HTML, JavaScript and Aamu.app‚Äôs database through GraphQL. So, it‚Äôs what is known as a \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://en.wikipedia.org/wiki/Single-page_application\" id=\"e95e17ae-a128-459b-be7b-25bf646a5406\"\u003esingle-page application\u003c/a\u003e. The source code for this application (well, one HTML file with some JavaScript in it) is at \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://github.com/AamuApp/example-calendar\" id=\"b4a5f114-360a-465f-a38e-78165fde9935\"\u003eGitHub\u003c/a\u003e. \u003c/p\u003e\u003ch2\u003eUsing this in real life\u003c/h2\u003e\u003cp\u003eA small warning is in order: this uses the database API key, which gives write permissions to the database. So, using this on the public Internet like this is not advised. In those cases you should do the API access on the server side.\u003c/p\u003e","title":"Creating a single-page application with Aamu.app's database and GraphQL API"},{"content":" There are (at least) three ways to create a contact form with Aamu.app. Let‚Äôs look at the first one in detail.\nIngredientsThe ingredients for this contact form are:\nHTML code for the form itself, which you can grab from https://github.com/AamuApp/contact-form\nAamu.app database, with forms enabled\nWhat you would do at your website is that you would add the HTML code, with CSS, to the appropriate location of your site, and tie the form to Aamu.app database with the Aamu.app database‚Äôs endpoint url and the Aamu.app database‚Äôs API key. Let‚Äôs see how to do all this.\nCreating the Aamu.app databaseWe have a ready-made template of the database that you can use for storing the contact form‚Äôs data ‚Äî it‚Äôs under the ‚Äúarrow button‚Äù just next to the ‚Äúplus button‚Äù that you would normally create an empty database with. So click the arrow button and select the Contact Form:\nSetting up the database to accept form submissionsIn the database settings, you should first enable the forms API:\nYou should select the table, where the form submissions will go to:\nThen copy the Forms endpoint, and put it into the contact form‚Äôs HTML code, into \u0026lt;form action=‚ÄùENDPOINT HERE‚Äù\u0026gt;.\nCreating the FormTo create the form, let‚Äôs start by grabbing the example HTML code from GitHub. The important part of it is the \u0026lt;form\u0026gt;...\u0026lt;/form\u0026gt;:\n\u0026lt;form id=\"contactForm\" action=\"ENDPOINT_HERE\" method=\"POST\" enctype=\"multipart/form-data\" \u0026gt; \u0026lt;div\u0026gt; \u0026lt;input placeholder=\"Name\" type=\"text\" name=\"name\" id=\"form_name\" required autofocus\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;input placeholder=\"Email\" type=\"text\" name=\"email\" id=\"form_email\" required\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;textarea placeholder=\"Message\" name=\"message\" id=\"form_message\" required\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button id=\"submit\" type=\"submit\"\u0026gt;Send\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt;The way this form works, is first by the action=\"ENDPOINT_HERE\" which sends the form the API endpoint. Form input field bindingsAnother important point is how the form input fields‚Äô names are matched to the database fields. The way the input field names are created is pretty straightforward ‚Äî they are basically lowercase words with spaces turned into underscores. The correct input field names can also be seen in the Database settings / Forms. You can copy the \u0026lt;form\u0026gt;‚Äòs HTML code there and use it in your applications.\nThe form which you can get from GitHub has some other niceties ‚Äî for example it is submitted by JavaScript on the fly, without causing a round-trip at the server (Aamu.app‚Äôs server).\nFor example, in our contact form database, there are three fields: Name, Email, Message. These correspond to form input fields name, email, message. That‚Äôs about it!Now, if you have the form in place, point your browser to it, and test if. All the form submissions should end up in the database.\n","permalink":"https://aamu.app/blog/posts/creating-a-contact-form-with-aamuapp/","summary":"\u003cp\u003eThere are (at least) three ways to create a contact form with Aamu.app. Let‚Äôs look at the first one in detail.\u003c/p\u003e\u003ch2\u003eIngredients\u003c/h2\u003e\u003cp\u003eThe ingredients for this contact form are:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cp\u003eHTML code for the form itself, which you can grab from \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://github.com/AamuApp/contact-form\"\u003ehttps://github.com/AamuApp/contact-form\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003eAamu.app database, with \u003cem\u003eforms\u003c/em\u003e enabled\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eWhat you would do at your website is that you would add the HTML code, with CSS, to the appropriate location of your site, and tie the form to Aamu.app database with the Aamu.app database‚Äôs \u003ccode\u003eendpoint url\u003c/code\u003e and the Aamu.app database‚Äôs API key. Let‚Äôs see how to do all this.\u003c/p\u003e","title":"Creating a contact form with Aamu.app"},{"content":" How to create a blog with Aamu.app? Here is how I have done it for Aamu.app‚Äôs official blog at https://aamu.app/blog/.\nThe ingredients of this blog are:\nA database at Aamu.app\nFor writing the blog posts: documents at Aamu.app\nFor creating the actual blog: Hugo static site generator\nA server (with a shell access) to host the blog\nGit to publish the blog to the server (pushing the repo)\nNginx for serving the static site (git repo)\nYou can also use some other method to host the blog, for example Netlify. With this method you don‚Äôt need a server nor git. You can see the source code for the blog at https://github.com/AamuApp/aamu-blog.\nThe recipeHere‚Äôs how it goes, from start to finish.\nCreate a databaseCreate a database at Aamu.app with the provided template aamu-blog:\nYou would use this database as what is known as a ‚ÄúHeadless CMS‚Äù ‚Äî the data from the database can be retrieved from the Aamu.app‚Äôs GraphQL database API.\nInside the database you will see two tables: Blog post and Person. If you are not happy with the names, you can rename them. The table Blog post is for posts (üßê) and Person is for post authors. You should first create a row in Person which you can then link into your posts:\nThen create a row into Blog post table and fill the data accordingly. Body field will contain the blog posts HTML code. You can write the blog posts with Docs feature at Aamu.app, which we will get to next.\nHere‚Äôs a row for a blog post. ‚ÄúSlug‚Äù is the url component of the post.\nWhen you want to start writing the post, click the Body field of the row. You can write (copy-paste) HTML directly, or attach a Doc. Let‚Äôs attach a Doc:\nSetting up the API keyIn order to use the database as a headless CMS, it needs to be accessed from outside Aamu.app with GraphQL. You will need to create an API key and set it up for the blog build script.\nTo create an API key, go to database settings / API, and you will find what you need. Click ‚ÄúGenerate new API key‚Äù, copy it and paste to aamu-blog‚Äôs .env file, which aamu-blog uses for environment variables.\nWriting the blog postWe will use the Aamu.app‚Äôs Docs feature to write the blog post (just as I‚Äôm doing now). Writing a doc will automatically save the HTML code to the database‚Äôs Body field. So, writing the blog post is extremely easy.\nYou can also copy-paste the HTML to the Body field, if you want to write it with some other method.\nWhen you are ready to publish the blog post, set the publishing date, author, possibly ‚ÄúHero‚Äù image and any tags you would want, and set the status to ‚ÄúPublished‚Äù.\nCreating the blog with HugoLet‚Äôs create the actual blog now. The idea goes like this:\nThe build script retrieves blog posts from Aamu.app through the GraphQL API. The script knows the timestamp when it did this the last time (the timestamp is saved into a file) and only gets the updated/new blog posts.\nThe same script saves them into content files, as well as any images.\nHugo is run to convert the content files into a blog\nThe source code, which we use for our blog, is at https://github.com/AamuApp/aamu-blog. You can use it as a starting point for your own blog, or just get ideas from it.\nYou would typically use a development machine to create the blog and then upload (possibly with git) into the hosting server. You can also do all of this at a service like Netlify. If you want to use a service, they can usually be triggered to build the blog with a build hook. You can create such a build hook at your Aamu.app database‚Äôs settings: Publishing the blogStill one thing to do: to actually publish the blog at the hosting server.\nAt the simplest, this can be done by uploading what Hugo created to the server. I have set up a git bare repo, with a post-receive hook, which handles the uploading part. Using git with a ‚Äúbare repo‚Äù is a handy way to do this, but a bit more complex.\nThat‚Äôs It!Let us know if there was something that left you wondering - how could I improve this tutorial? Join our Discord server to tell!\n","permalink":"https://aamu.app/blog/posts/creating-a-blog-with-aamuapp/","summary":"\u003cp\u003eHow to create a blog with Aamu.app? Here is how I have done it for Aamu.app‚Äôs official blog at \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://aamu.app/blog/\"\u003ehttps://aamu.app/blog/\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eThe ingredients of this blog are:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cp\u003eA database at Aamu.app\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003eFor writing the blog posts: documents at Aamu.app\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003eFor creating the actual blog: \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://gohugo.io/\" id=\"3cc0064a-8cad-48d6-93df-8f6ff1fd33b7\"\u003eHugo\u003c/a\u003e static site generator\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003eA server (with a shell access) to host the blog\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003eGit to publish the blog to the server (pushing the repo)\u003c/p\u003e","title":"Creating a blog with Aamu.app"},{"content":" Aamu.app database supports two APIs: one for submitting data into the database via standard HTML forms ‚Äì this works just one direction. Also you can get and put data into the database via GraphQL.\nAs Wikipedia says it:\nGraphQL is an open-source data query and manipulation language.\nIt has a syntax for reading and writing the database. For testing it out, it is helpful to have a tool. I like Altair.\nTo use Altair or any similar tool you first need to setup it with the database endpoint and the database API key. The database endpoint is:\nhttps://api.aamu.app/api/v1/graphql/You can get the API key from your database settings.\nQuerying the databaseLet's assume we are using the database aamu-blog, which is the actual database which holds the blog posts you are reading now! The database looks like this in Aamu.app (at this moment in time there are only two rows, i.e. posts):\nIt has two tables: \"Blog post\" and \"Person\". Our GraphQL API will have these fields for this database (you can use for example Altair GrapQL client to see the database schema):\nSo, the GraphQL API will create two fields for each table, one for fetching a single item (by an ID), e.g. BlogPost and one (BlogPostCollection) for fetching many items (by some criteria you define).\nLet's see how to get a single item. This is the query:\nquery { BlogPost (slug: \"introduction-to-aamuapp-graphql\") { id created updated title slug description body status } }When you do the query, you will get the data back (if it exists) as json:\n{ \"data\": { \"BlogPost\": { \"id\": \"3cfa30f8-ab29-459a-ad91-0651ae0b08ad\", \"created\": \"2021-10-19T19:11:49.257Z\", \"updated\": \"2024-03-09T07:38:23.916Z\", \"title\": \"Introduction to Aamu.app GraphQL\", \"slug\": \"introduction-to-aamuapp-graphql\", \"description\": \"How to use the database from a distance\", \"body\": \"Aamu.app database supports two APIs: one for submitting data into the database via standard html forms ‚Äì this works just one direction. Also you can get and put data into the database via GraphQL.\" ... etcYou can also get items by querying the field BlogPostCollection. This gives you multiple rows. You can also do filtering, sorting and pagination.\nLet's see how getting multiple posts goes. Let's get all the blog posts that are published (status is \"published\") and the results will be sorted by creation date (older first):\nquery { BlogPostCollection( filter: { status: { EQ: \"published\" } } sort: { created: DESC } ) { title slug created description } }This will give the following results:\n{ \"data\": { \"BlogPostCollection\": [ { \"title\": \"Introduction to Aamu.app GraphQL\", \"slug\": \"introduction-to-aamuapp-graphql\", \"created\": \"2021-10-19T09:00:00.000Z\", \"description\": \"How to use the database from a distance\" }, { \"title\": \"Introduction to Aamu.app\", \"slug\": \"introduction-to-aamu-app\", \"created\": \"2021-10-10T09:00:00.000Z\", \"description\": \"Aamu.app is an all-in-one productivity tool\" } ] } }You can use other filtering methods, for example GT (Greater Than):\nquery { BlogPostCollection( filter: { status: { EQ: \"published\" } updated: { GT: updated: { GT: \"2022-01-04T02:15:37.975Z\" } } } ) { id created updated title slug description body heroImage { url } author { name } status tags } }This is the actual query which I'm using to create this blog you are reading. This will fetch all the updated blog posts since I ran this last time (since I built the blog last time). I'm using Hugo to create this blog, and the blog posts are in Aamu's datab, and I'm writing this using the Aamu's Documents feature.\nNote that there is a field called heroImage, which has a subfield url. You can find all the fields with Altair's Docs feature. It will fetch the database structure and you will see all the fields that you can query (or mutate).\nWith Altair you can also see what kind of filtering you can do. For example, Altair sees that the updated field is a date and will give you the following filtering options:\nYou can get that list by pressing Ctrl-Space.\nYou can also get similar lists in every spot in the query window ‚Äì all the fields and filtering options will be easy to see.\nMutating the databaseHere we show at how we can mutate database rows.\nAt the moment you can mutate single objects, which are targeted with the id.\nHere we update a database row in our Person table. We will target the row that we want to change with the id field. In Aamu.app, the id field is a string, and you can find the correct id by first querying the persons, possibly with some criteria. Here is an example mutation query. It will change the title of the person and return some fields that we want to see about the person.\nmutation { Person(id: \"29940627-51e8-4fd0-82ab-d718ddfe802f\", title: \"Chief Procrastination Officer (CPO)\") { id created updated name bio title } }\n","permalink":"https://aamu.app/blog/posts/introduction-to-aamuapp-graphql/","summary":"\u003cp\u003eAamu.app database supports two APIs: one for submitting data into the database via standard HTML forms ‚Äì this works just one direction. Also you can get and put data into the database via GraphQL.\u003c/p\u003e\u003cp\u003eAs Wikipedia says it:\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eGraphQL is an open-source data query and manipulation language.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eIt has a syntax for reading and writing the database. For testing it out, it is helpful to have a tool. I like Altair.\u003cbr\u003eTo use Altair or any similar tool you first need to setup it with the database endpoint and the database API key. The database endpoint is:\u003c/p\u003e","title":"Introduction to Aamu.app GraphQL"},{"content":"Working collaboratively can sometimes feel like a mess. Too many apps, scattered chats, docs and tasks all over the place. Aamu.app is here to change that. It‚Äôs an all-in-one tool that brings everything your team needs into one spot, so you can stop juggling and start getting stuff done.\nWhat Makes It Cool? Here‚Äôs why Aamu.app feels like a breath of fresh air ‚õÖÔ∏è :\nAamu.app contains the most often used (by metric chosen by me) SaaS apps in one package. It‚Äôs got tasks tracking (with different views like a kanban board, a synced calendar), chats and posts, document editing, video calls, a helpdesk, emails, graphic design, a form builder and even databases. And what‚Äôs more ‚Äî you can use many of these together ‚Äî compounding their usefulness.\nIt makes collaboration between all of these apps easy. One unified user interface, and basically one app.\nWhether you‚Äôre a tiny crew or a bigger group, it‚Äôs built to cut down on the chaos of using a bunch of different tools.\nPlus, it saves you from paying for a million separate subscriptions.\nüí° Pro-tip: if you are doing some long-term work in a document, you can always open a new tab, so you don‚Äôt have to interrupt the work in any place.\nFeatures So, let‚Äôs take a closer look at the features.\nBut before that, let me say that all the features work by using the keyboard only‚Äîyou rarely need to touch the mouse, unless you want to, of course.\nAnd on top of that, all features and all the data is real-time, and every user can edit everything at the same time ‚Äî the data is automatically synced in real-time, and you will always see the up-to-date version of any data, anywhere.\nSo, those features I promised:\nTasks: Keep track of what needs doing with a kanban board, a list, a calendar or a timeline. There exists an appropriate view for every occasion.\nWork Together, Live: Edit documents as a team without the ‚Äúwhich version is this?‚Äù confusion. It even has Penpot 2.x built in‚Äîa free design tool‚Äîso you don‚Äôt need something like Figma.\nTalk Without the Noise: Chat in groups, post updates, or hop on a video call with LiveKit. It‚Äôs all there, no extra apps required.\nHelpdesk: Got customers? The helpdesk handles live chats and emails, making it easy to stay on top of ‚Äútickets‚Äù.\nDatabases for Anything: Use them for customer tracking, a website, a blog or whatever you need. With GraphQL, you can get the data out (or put it in if you so wish).\nA Form Builder: collect data with a form and store it into the Database.\nCombine them: This blog that you are reading has been written with the Docs and stored in the Database ‚Äî and then built into the real site (with open source tools).\nPricing We are innovative here as well‚Äîyou can pay what you want. Or more appropriately, what you think this is worth for you and how much you can afford to pay. From 0 to as much as you want.\nWe want to test if this model works. It feels fair to us, hopefully it proves to work.\nWhat About That Name? Aamu means ‚Äúmorning‚Äù in Finnish. I think it‚Äôs also quite a beautiful name. And it comes early in the alphabetic. It‚Äôs simple and distinctive. And most people start working in the morning (not me). üòÜ\nShould You Trust This Tool? Absolutely! As the founder, I bring years of experience as an entrepreneur and programmer. My earlier venture, Embed.rocks , has been reliably serving paying customers since 2016, demonstrating our commitment to quality and trust.\nWhat‚Äôs more, there are no major costs involved in running Aamu.app, so it can‚Äôt really go bankrupt.\nAt the moment the service is run by one person only, so that‚Äôs the biggest risk‚Äîif something were to happen to me. When possible, I will take care of this issue too.\n","permalink":"https://aamu.app/blog/posts/introduction-to-aamu-app/","summary":"\u003cp\u003eWorking collaboratively can sometimes feel like a mess. Too many apps, scattered chats, docs and tasks all over the place. Aamu.app is here to change that. It‚Äôs an all-in-one tool that brings everything your team needs into one spot, so you can stop juggling and start getting stuff done.\u003c/p\u003e\n\u003ch2 id=\"what-makes-it-cool\"\u003eWhat Makes It Cool?\u003c/h2\u003e\n\u003cp\u003eHere‚Äôs why Aamu.app feels like a breath of fresh air ‚õÖÔ∏è :\u003c/p\u003e\n\u003cp\u003eAamu.app contains the most often used (by metric chosen by me) SaaS apps in one package. It‚Äôs got tasks tracking (with different views like a kanban board, a synced calendar), chats and posts, document editing, video calls, a helpdesk, emails, graphic design, a form builder and even databases. And what‚Äôs more ‚Äî you can use many of these together ‚Äî compounding their usefulness.\u003c/p\u003e","title":"Introduction to Aamu.app"}]