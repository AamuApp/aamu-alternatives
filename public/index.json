[{"content":" Earlier we created the contact form. Let’s spice it up a little bit — let’s create an automation for it! Since we might want to get an email notification when someone sends us a message through the contact form, let’s do that. Let’s create an automation that sends an email to us.\nWe start by going into the contact form database and in the 3 dots menu you will see “Automations”.\nAnd you will see an empty page of Automations. Let’s create one:\nNext you will see a few things, which I will explain here:\nThe Automation will be triggered by some event. At the moment, only Row inserted is supported.\nTriggering table. We need to specify, which table triggers the Automation.\nBindings. When the row is inserted, it has some data, and the different fields are named by some human-readable name which tells what the data is about. Here are those names turned into lowercase character strings, wrapped in {{}}. You can use these bindings in the email that you send out. For example, the {{name}} means the name that the person gave and {{email}} is his/her email address.\nPublishing. When you are ready to take this Automation into use, set this to Public.\nAdd action. Your automation needs actions — at least one. Add it here.\nActionsYour automation needs actions. Currently, two types of actions are supported: Sending an email\nCreating a task\nAnd email needs a sender. And we can only use a sender that we have specified by ourselves. So, in case you haven’t set up Emails yet, now would be a good time to do that.\nHere are the email accounts that I have set up, and I can choose from one of them:\nNext we get to the main point — writing the email template that will be used for sending.\nHere is the screen for writing email templates:\nThe Bindings are explained there again — how they work. You can use them in the body section of the email. And the actual bindings you saw in previous section.\nThe To field would be the email where you want the email to arrive at. The From field was set earlier.\nYou can write a template like this, for example:\nSubject: Contact form submission\nTo: youraddress@gmail.com\nBody:\nHi me! Someone just filled our contact form with this information: Name: {{name}} Email: {{email}} Message: {{message}}Click Save template.\nAt this point you are done — just change the Publishing to Public. And start waiting for the emails to arrive!\n","permalink":"https://aamu.app/blog/posts/database-automations-with-aamuapp/","summary":"\u003cp\u003eEarlier we created the contact form. Let’s spice it up a little bit — let’s create an automation for it! \u003c/p\u003e\u003cp\u003eSince we might want to get an email notification when someone sends us a message through the contact form, let’s do that. Let’s create an automation that sends an email to us.\u003c/p\u003e\u003cp\u003eWe start by going into the contact form database and in the 3 dots menu you will see “Automations”.\u003c/p\u003e","title":"Database automations with Aamu.app"},{"content":" Let’s see how we can use Aamu.app’s Form Builder to create survey forms. First we go to Forms section and create an empty form:\nWhich looks like this:\nStart by adding the Form title and Description, if you so choose.\nAfter which you can start adding form fields.\nText answer and Choice is probably the most common. Let’s add a Choice:\nWith Choice, you have three different ones: radio buttons (select one from many), dropdown box (select one from many) and checkboxes (select many from many). Here we have radio buttons, and it looks like this as the final form:\nLet’s add some data (fill the form and Submit it), then look at the Responses page:\nYou get a nice graphic of the answers. You can see the detailed data in Databases:\nIn Form settings you can set all kinds of useful behavior, like a friendly URL, a custom thank-you page or custom CSS:\nForms and DatabasesSince each form submission creates a database entry, all the features, that are available for databases, are also available for form data. One particularly useful feature may be Database automations — which means that when a new database row (form submission) is added, you can define different actions for it. One action may be to send an email, another may be to create a Task.\nWe will look at Database automations next!\n","permalink":"https://aamu.app/blog/posts/creating-survey-forms-with-aamuapp-form-builder/","summary":"\u003cp\u003eLet’s see how we can use Aamu.app’s Form Builder to create survey forms. \u003c/p\u003e\u003cp\u003eFirst we go to Forms section and create an empty form:\u003c/p\u003e\u003cimg src=\"6929049924412953_image.png\" style=\"width: auto;\" id=\"b96036d7-5971-4959-9e86-40c56ae229a0\"\u003e\u003cp\u003eWhich looks like this:\u003c/p\u003e\u003cimg src=\"6548070974540068_image.png\" style=\"width: auto;\" id=\"f3c3b3a5-a7fe-4333-8e83-95a3ea8c27fa\"\u003e\u003cp\u003eStart by adding the Form title and Description, if you so choose.\u003c/p\u003e\u003cp\u003eAfter which you can start adding form fields.\u003c/p\u003e\u003cimg src=\"2770690099255068_image.png\" style=\"width: auto;\" id=\"c3135cc4-4fe7-48a7-b726-9f19eae2b470\"\u003e\u003cp\u003eText answer and Choice is probably the most common. Let’s add a Choice:\u003c/p\u003e\u003cimg src=\"4650121434969430_image.png\" style=\"width: auto;\" id=\"6654df55-1427-4f6b-af40-db7ca4a13893\"\u003e\u003cp\u003eWith Choice, you have three different ones: radio buttons (select one from many), dropdown box (select one from many) and checkboxes (select many from many). Here we have radio buttons, and it looks like this as the final form:\u003c/p\u003e","title":"Creating survey forms with Aamu.app Form Builder"},{"content":" In Helpdesk, there is also a Livechat which you can add to your website. Although it says “chat”, it can also handle emails, when there is no support agent answering to chat requests. Let set that up now.\nFirst you would add users to the Helpdesk project at Projects ➡️ Helpdesk ➡️, like before when we set up the emails for Helpdesk. Only those users will be able to access the Helpdesk project.\nThen, to set the Livechat, you would do it at Projects ➡️ Helpdesk ➡️ Livechat:\nLivechat translationsIn the settigns for Livechat, there are some texts, which you can translate to your needs. You can basically translate everything that appear in the Livechat widget, so you don’t have to show English on a non-English site.\nLivechat embed codeOn the settings page, at the bottom, there is the embed code, which you would put to your website. So, just copy-paste the code to your site, and you should be all set. The code looks like this:\n\u0026lt;script defer src=\"https://ilkkah.aamu.app/livechat.js\"\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;aamu-livechat data-username=\"\" data-useremail=\"\" data-host=\"ilkkah\" data-pid=\"ba09173eaddc06b9c88423723dd266a4\"\u0026gt;\u0026lt;/aamu-livechat\u0026gt;There are a couple of things you can set if you need more control. On sites where people log in, you can set the username and/or email address for each user before they click the chat widget. This is optional, but will let the Helpdesk know exactly who you are talking with.\nAfter this is done, you should see this in the bottom right corner of your site:\nThat’s the Livechat widget. At the moment it shows the Email icon, which means that the widget will function as an email-sending widget:\nYou can control the widget’s behavior at your Aamu.app site:\nWhen you go to the Helpdesk project, there is an option to enable or disable the chat functionality of the widget. If you want to be available for chatting, you would turn that on, and the widget changes the appearance:\nNow, as you see, the chat widget shows a chat bubble — it will be used for chatting.\nWhen someone clicks that, it will show a waiting line, until you accept the chat request:\nAt this point you will see a notification in the right-hand navigation bar:\nYou can also see the incoming chats in Helpdesk ➡️ Chats ➡️ waiting:\nYou will see the country flag where the chat is coming from and the user’s name. Normally it will be Anonymous, but in case you used an authenticated chat, you will see the user’s real name,\nSo., just click the chat and start chatting. A Helpdesk ticket will be created after the chat is done, and the chat will be attached to that ticket. That way you can keep all the issues in the same place, no matter if they come through the email or chat.\n","permalink":"https://aamu.app/blog/posts/setting-up-helpdesk-in-aamuapp-part-2-livechat/","summary":"\u003cp\u003eIn Helpdesk, there is also a Livechat which you can add to your website. Although it says “chat”, it can also handle emails, when there is no support agent answering to chat requests. Let set that up now.\u003c/p\u003e\u003cp\u003eFirst you would add users to the Helpdesk project at Projects \u003cspan data-node=\"emoji\" data-emoji=\"➡️\" data-annotation=\"right arrow\" style=\"user-select: text; font-family: \u0026quot;Twemoji Mozilla\u0026quot;, \u0026quot;Apple Color Emoji\u0026quot;, \u0026quot;Segoe UI Emoji\u0026quot;, \u0026quot;Segoe UI Symbol\u0026quot;, \u0026quot;Noto Color Emoji\u0026quot;, \u0026quot;EmojiOne Color\u0026quot;, \u0026quot;Android Emoji\u0026quot;, sans-serif;\"\u003e\u003cimg alt=\"right arrow\" style=\"display: none; width: 1em; height: 1em;\"\u003e\u003cspan role=\"img\" aria-label=\"right arrow\" style=\"display: inline-block;\"\u003e➡️\u003c/span\u003e\u003c/span\u003e Helpdesk \u003cspan data-node=\"emoji\" data-emoji=\"➡️\" data-annotation=\"right arrow\" style=\"user-select: text; font-family: \u0026quot;Twemoji Mozilla\u0026quot;, \u0026quot;Apple Color Emoji\u0026quot;, \u0026quot;Segoe UI Emoji\u0026quot;, \u0026quot;Segoe UI Symbol\u0026quot;, \u0026quot;Noto Color Emoji\u0026quot;, \u0026quot;EmojiOne Color\u0026quot;, \u0026quot;Android Emoji\u0026quot;, sans-serif;\"\u003e\u003cimg alt=\"right arrow\" style=\"display: none; width: 1em; height: 1em;\"\u003e\u003cspan role=\"img\" aria-label=\"right arrow\" style=\"display: inline-block;\"\u003e➡️\u003c/span\u003e\u003c/span\u003e, like before when we set up the emails for Helpdesk. Only those users will be able to access the Helpdesk project.\u003c/p\u003e","title":"Setting up Helpdesk in Aamu.app - Part 2, livechat"},{"content":" This time, let’s setup Helpdesk.\nWe are going to use emails as the Helpdesk “route” here — people will contact us through the email. For emails, we need a domain. We covered domain setup earlier in the Emails section here. So, go read that first and set up your email domain with those instructions.\nAfter that we are going to set up the Helpdesk, which continues in Project settings. UsersFirst, we are going to add some users to our Helpdesk project. Only those users will be able to access the Helpdesk project. Do it here:\nIn Helpdesk ➡️ Users you will be able to add users to your Helpdesk project.\nEmailsThen, let’s set up the emails for our Helpdesk. Going to the right tab, it looks similar to what we saw earlier when setting up emails in general. You would attach a domain to this project:\nLet’s attach our kansalaiskeskustelu.fi domain to our Helpdesk project, and we see this:\nWe will have only one email account per a Helpdesk project, and we will set up the email account here, in Project settings. So, let’s just fill in the blanks and click “Set…”.\nAfter that you can go to the Helpdesk section, and start waiting for the emails to come in. 🤓 ","permalink":"https://aamu.app/blog/posts/setting-up-helpdesk-in-aamuapp-part-1-emails/","summary":"\u003cp\u003eThis time, let’s setup Helpdesk.\u003c/p\u003e\u003cp\u003eWe are going to use emails as the Helpdesk “route” here — people will contact us through the email. \u003c/p\u003e\u003cp\u003eFor emails, we need a domain. We covered domain setup earlier in the \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://aamu.app/blog/posts/setting-up-emails-in-aamuapp/\" id=\"eb6e4907-75f1-4b0e-8083-f09c15d53128\"\u003eEmails section here\u003c/a\u003e. So, go read that first and set up your email domain with those instructions.\u003c/p\u003e\u003cp\u003eAfter that we are going to set up the Helpdesk, which continues in Project settings. \u003c/p\u003e","title":"Setting up Helpdesk in Aamu.app - Part 1, emails"},{"content":" Let’s tackle a bigger subject — emails. Due to the nature of the game, it involves some pretty techy stuff, domains and other scary things. This is the same for Helpdesk, which shares those domain settings with Emails.\nEmail domainEmails work so that one project can hold one Email domain. This project can hold one email account for each project user. Those email accounts are personal — others won’t be able to see your email account’s emails or contacts.\nEmail domains are created in Team settings. First you need to add an email domain. Let’s do that now.\nGo to Profile icon ➡️ Team ➡️ Email domains. To add a new domain, click the plus button:\nAnd proceed to add the domain. Note that you can choose between Aamu.app’s email (IMAP) server and a third party IMAP server. So, that’s some extra flexibility. Let’s use Aamu.app’s IMAP server.\nAfter we have added it, we get to the screen where the domain will be verified through the DNS data. For this you need to get to the site that holds the DNS data for your domain, for example Cloudflare. The data that you should enter into your domain’s DNS data looks like this:\nThere are four fields to set. So just set them, copy-paste from the screen to the site that holds your site’s DNS data. After clicking Verify you should hopefully see this:\nIf the verification didn’t succeed, just try again until it does.\nAttaching the domain to the projectAfter the hard part, DNS verification is done, there is still one more step until we get to create our mailboxes. This should be simple enough. In the Project settings, i.e. Projects ➡️ Your Awesome Project ➡️ Email you can attach the domain you just added to the project where you want to use it.\nMailboxesAfter that we get to adding the mailboxes for those who want to have a mailbox in this domain. Each user will create his/her mailbox and that will happen in when you go from the site’s main navigation (right-hand side) section EMAILS ➡️ select your project ➡️ Email settings:\nSo, here you will choose your email address and your full name. After that you will be able to set something more: the email footer, which will be appended to the emails you send. And also Tabs, which are like folders.\nDone!After this the email is set, you can receive and send emails.\nThere are some features that we hope you will like in the email client, but you will find those by your own.\n","permalink":"https://aamu.app/blog/posts/setting-up-emails-in-aamuapp/","summary":"\u003cp\u003eLet’s tackle a bigger subject — emails. Due to the nature of the game, it involves some pretty techy stuff, domains and other scary things. This is the same for Helpdesk, which shares those domain settings with Emails.\u003c/p\u003e\u003ch2\u003eEmail domain\u003c/h2\u003e\u003cp\u003eEmails work so that one project can hold one \u003cem\u003eEmail domain\u003c/em\u003e. This project can hold one email account for each project user. Those email accounts are personal — others won’t be able to see your email account’s emails or contacts.\u003c/p\u003e","title":"Setting up Emails in Aamu.app"},{"content":" Did you know that you can use Aamu.app as a Calendly alternative? Well, you can, and more, since you can tie it up with Aamu.app’s video meetings. Here’s how.\nFirst, go to: Project settings → Tasks → Event Booking\nThere you will see a host of settings. Set them as you would like — there are a lot of configuration options. In the end, what you want is the link to the event calendar. It looks like this: https://ilkkah.aamu.app/book-event/1700500094527/15-minute-meeting\nYou can use that link to pass it to anyone who you would like to invite into the meeting. So, copy the link, and send it all the people you think might want to have meetings with you!\nWhat you will find in the URL, looks like this:\nSo, it’s a basic event calendar, with each hour separated and weekends (or unavailable days) grayed out. From each “hour” you get a list of available times to choose from.\nUser’s time zone is pre-selected and visible, since when people are selecting times from a calendar, the time zone matters. The event calendar also shows the type of meeting, which you can set in the settings. Video meeting here.\nNext you will enter your contact details:\nAnd in the next screen everything is done:\nAt this point you should see a new task in Tasks listing:\nAlso, a new Meeting is created, which you can see in the task details:\nAnd in the Meetings listing:\nIn SummaryEvent calendar will create a new Task and a new Meeting.\nA Task is created because Tasks are the most versatile way to handle upcoming events. For example, Tasks can be synced with Google calendar, which makes them even more useful.\n","permalink":"https://aamu.app/blog/posts/aamuapp-as-a-calendly-alternative/","summary":"\u003cp\u003eDid you know that you can use Aamu.app as a Calendly alternative? Well, you can, and more, since you can tie it up with Aamu.app’s video meetings. Here’s how.\u003c/p\u003e\u003cp\u003eFirst, go to: Project settings → Tasks → Event Booking\u003c/p\u003e\u003cimg src=\"1914904092378542_image.png\" style=\"width: auto;\" id=\"c30f960e-1db0-498f-9cfd-0a7d04452f20\"\u003e\u003cp\u003eThere you will see a host of settings. Set them as you would like — there are a lot of configuration options. In the end, what you want is the link to the event calendar. It looks like this: \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://ilkkah.aamu.app/book-event/1700500094527/15-minute-meeting\"\u003ehttps://ilkkah.aamu.app/book-event/1700500094527/15-minute-meeting\u003c/a\u003e\u003c/p\u003e","title":"Aamu.app as a Calendly alternative"},{"content":" This time, let’s create a simple application, which uses just HTML, JavaScript and Aamu.app’s database through GraphQL. So, it’s what is known as a single-page application. The source code for this application (well, one HTML file with some JavaScript in it) is at GitHub. Using this in real lifeA small warning is in order: this uses the database API key, which gives write permissions to the database. So, using this on the public Internet like this is not advised. In those cases you should do the API access on the server side.\nYou can see the general principle here and maybe that will guide you enough into real applications.\nCreate the databaseFirst you need the database at Aamu.app. Conveniently, we have a template for it. You can create a database from the template in here:\nThe AppWe will create a sort of reservation calendar, which accepts entries consisting of a title and a date, and show the current entries as a list. It would look like this:\nThe list of entries is fetched from the database with GraphQL, for which you would need an API KEY, which you can create in the Database Settings.\nA new entry is submitted through the Forms endpoint, which you can also get in the Database Settings. We could also send the form data through GraphQL API, but using the forms endpoint is easy and enough for this application.\nBoth of these should be set in the HTML file, where is says like this:\n// Set these! const API_KEY = ''; const FORM_ENDPOINT = '';How the GraphQL part works here?So, when the HTML file is loaded into the browser, this happens:\nasync function getData() { try { const response = await fetch('https://api.aamu.app/api/v1/graphql/', { method: 'POST', headers: { 'Content-Type': 'application/json', 'Accept': 'application/json', 'x-api-key': API_KEY }, body: JSON.stringify({ query: ` { Sheet1Collection(sort: { startTime: DESC }) { id created_at updated_at title startTime } } `}) }); if (!response.ok) throw new Error(`HTTP error: ${response.status}`); const data = await response.json(); if (data?.errors) { data.errors.forEach(e =\u0026gt; setError(e.message)); } else if (data?.data) { handleData(data.data); } else { setError('No data returned from API'); } } catch (err) { console.log('Error:', err); } } // Get current data from the calendar (database) getData();So, getData() is called, which fetches the rows from the database (table Sheet1) and then presents the data on the screen (function handleData).\nNote that you can do GraphQL queries very easily, using the Fetch API. You can read more about the syntax of the GraphQL queries here in our blog.\nSending the dataAs told, sending happens through the Forms API. Sharing the Forms API endpoint is safe — it can be used only for adding data. That’s it!There’s not much more to it: just fetching data from a database and adding data to a database, while showing it on a screen. This was a really simple application.\n","permalink":"https://aamu.app/blog/posts/creating-a-single-page-application-with-aamuapps-database-and-graphql-api/","summary":"\u003cp\u003eThis time, let’s create a simple application, which uses just HTML, JavaScript and Aamu.app’s database through GraphQL. So, it’s what is known as a \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://en.wikipedia.org/wiki/Single-page_application\" id=\"e95e17ae-a128-459b-be7b-25bf646a5406\"\u003esingle-page application\u003c/a\u003e. The source code for this application (well, one HTML file with some JavaScript in it) is at \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://github.com/AamuApp/example-calendar\" id=\"b4a5f114-360a-465f-a38e-78165fde9935\"\u003eGitHub\u003c/a\u003e. \u003c/p\u003e\u003ch2\u003eUsing this in real life\u003c/h2\u003e\u003cp\u003eA small warning is in order: this uses the database API key, which gives write permissions to the database. So, using this on the public Internet like this is not advised. In those cases you should do the API access on the server side.\u003c/p\u003e","title":"Creating a single-page application with Aamu.app's database and GraphQL API"},{"content":" There are (at least) three ways to create a contact form with Aamu.app. Let’s look at the first one in detail.\nIngredientsThe ingredients for this contact form are:\nHTML code for the form itself, which you can grab from https://github.com/AamuApp/contact-form\nAamu.app database, with forms enabled\nWhat you would do at your website is that you would add the HTML code, with CSS, to the appropriate location of your site, and tie the form to Aamu.app database with the Aamu.app database’s endpoint url and the Aamu.app database’s API key. Let’s see how to do all this.\nCreating the Aamu.app databaseWe have a ready-made template of the database that you can use for storing the contact form’s data — it’s under the “arrow button” just next to the “plus button” that you would normally create an empty database with. So click the arrow button and select the Contact Form:\nSetting up the database to accept form submissionsIn the database settings, you should first enable the forms API:\nYou should select the table, where the form submissions will go to:\nThen copy the Forms endpoint, and put it into the contact form’s HTML code, into \u0026lt;form action=”ENDPOINT HERE”\u0026gt;.\nCreating the FormTo create the form, let’s start by grabbing the example HTML code from GitHub. The important part of it is the \u0026lt;form\u0026gt;...\u0026lt;/form\u0026gt;:\n\u0026lt;form id=\"contactForm\" action=\"ENDPOINT_HERE\" method=\"POST\" enctype=\"multipart/form-data\" \u0026gt; \u0026lt;input type=\"hidden\" name=\"redirect-error\" value=\"https://api.aamu.app/api/v1/forms/error\"\u0026gt; \u0026lt;input type=\"hidden\" name=\"redirect-success\" value=\"https://api.aamu.app/api/v1/forms/thank-you\"\u0026gt; \u0026lt;div\u0026gt; \u0026lt;input placeholder=\"Name\" type=\"text\" name=\"name\" id=\"form_name\" required autofocus\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;input placeholder=\"Email\" type=\"text\" name=\"email\" id=\"form_email\" required\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;textarea placeholder=\"Message\" name=\"message\" id=\"form_message\" required\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button id=\"submit\" type=\"submit\"\u0026gt;Send\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt;The way this form works, is first by the action=\"ENDPOINT_HERE\" which sends the form the API endpoint. Note the two hidden fields: redirect-error and redirect-success. You can set the redirect URLs with these. When sending the form with JavaScript, you won’t need these, but they are good to be there, since JavaScript isn’t always enabled by the user.\nForm input field bindingsAnother important point is how the form input fields’ names are matched to the database fields. The way the input field names are created is pretty straightforward — they are basically lowercase words with spaces turned into underscores. The correct input field names can also be seen in the Database settings / Forms. You can copy the \u0026lt;form\u0026gt;‘s HTML code there and use it in your applications.\nThe form which you can get from GitHub has some other niceties — for example it is submitted by JavaScript on the fly, without causing a round-trip at the server (Aamu.app’s server).\nFor example, in our contact form database, there are three fields: Name, Email, Message. These correspond to form input fields name, email, message. That’s about it!Now, if you have the form in place, point your browser to it, and test if. All the form submissions should end up in the database.\n","permalink":"https://aamu.app/blog/posts/creating-a-contact-form-with-aamuapp/","summary":"\u003cp\u003eThere are (at least) three ways to create a contact form with Aamu.app. Let’s look at the first one in detail.\u003c/p\u003e\u003ch2\u003eIngredients\u003c/h2\u003e\u003cp\u003eThe ingredients for this contact form are:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cp\u003eHTML code for the form itself, which you can grab from \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://github.com/AamuApp/contact-form\"\u003ehttps://github.com/AamuApp/contact-form\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003eAamu.app database, with \u003cem\u003eforms\u003c/em\u003e enabled\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eWhat you would do at your website is that you would add the HTML code, with CSS, to the appropriate location of your site, and tie the form to Aamu.app database with the Aamu.app database’s \u003ccode\u003eendpoint url\u003c/code\u003e and the Aamu.app database’s API key. Let’s see how to do all this.\u003c/p\u003e","title":"Creating a contact form with Aamu.app"},{"content":" How to create a blog with Aamu.app? Here is how I have done it for Aamu.app’s official blog at https://aamu.app/blog/.\nThe ingredients of this blog are:\nA database at Aamu.app\nFor writing the blog posts: documents at Aamu.app\nFor creating the actual blog: Hugo static site generator\nA server (with a shell access) to host the blog\nGit to publish the blog to the server (pushing the repo)\nNginx for serving the static site (git repo)\nYou can also use some other method to host the blog, for example Netlify. With this method you don’t need a server nor git. You can see the source code for the blog at https://github.com/AamuApp/aamu-blog.\nThe recipeHere’s how it goes, from start to finish.\nCreate a databaseCreate a database at Aamu.app with the provided template aamu-blog:\nYou would use this database as what is known as a “Headless CMS” — the data from the database can be retrieved from the Aamu.app’s GraphQL database API.\nInside the database you will see two tables: Blog post and Person. If you are not happy with the names, you can rename them. The table Blog post is for posts (🧐) and Person is for post authors. You should first create a row in Person which you can then link into your posts:\nThen create a row into Blog post table and fill the data accordingly. Body field will contain the blog posts HTML code. You can write the blog posts with Docs feature at Aamu.app, which we will get to next.\nHere’s a row for a blog post. “Slug” is the url component of the post.\nWhen you want to start writing the post, click the Body field of the row. You can write (copy-paste) HTML directly, or attach a Doc. Let’s attach a Doc:\nSetting up the API keyIn order to use the database as a headless CMS, it needs to be accessed from outside Aamu.app with GraphQL. You will need to create an API key and set it up for the blog build script.\nTo create an API key, go to database settings / API, and you will find what you need. Click “Generate new API key”, copy it and paste to aamu-blog’s .env file, which aamu-blog uses for environment variables.\nWriting the blog postWe will use the Aamu.app’s Docs feature to write the blog post (just as I’m doing now). Writing a doc will automatically save the HTML code to the database’s Body field. So, writing the blog post is extremely easy.\nYou can also copy-paste the HTML to the Body field, if you want to write it with some other method.\nWhen you are ready to publish the blog post, set the publishing date, author, possibly “Hero” image and any tags you would want, and set the status to “Published”.\nCreating the blog with HugoLet’s create the actual blog now. The idea goes like this:\nThe build script retrieves blog posts from Aamu.app through the GraphQL API. The script knows the timestamp when it did this the last time (the timestamp is saved into a file) and only gets the updated/new blog posts.\nThe same script saves them into content files, as well as any images.\nHugo is run to convert the content files into a blog\nThe source code, which we use for our blog, is at https://github.com/AamuApp/aamu-blog. You can use it as a starting point for your own blog, or just get ideas from it.\nYou would typically use a development machine to create the blog and then upload (possibly with git) into the hosting server. You can also do all of this at a service like Netlify. If you want to use a service, they can usually be triggered to build the blog with a build hook. You can create such a build hook at your Aamu.app database’s settings: Publishing the blogStill one thing to do: to actually publish the blog at the hosting server.\nAt the simplest, this can be done by uploading what Hugo created to the server. I have set up a git bare repo, with a post-receive hook, which handles the uploading part. Using git with a “bare repo” is a handy way to do this, but a bit more complex.\nThat’s It!Let us know if there was something that left you wondering - how could I improve this tutorial? Join our Discord server to tell!\n","permalink":"https://aamu.app/blog/posts/creating-a-blog-with-aamuapp/","summary":"\u003cp\u003eHow to create a blog with Aamu.app? Here is how I have done it for Aamu.app’s official blog at \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://aamu.app/blog/\"\u003ehttps://aamu.app/blog/\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eThe ingredients of this blog are:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cp\u003eA database at Aamu.app\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003eFor writing the blog posts: documents at Aamu.app\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003eFor creating the actual blog: \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://gohugo.io/\" id=\"3cc0064a-8cad-48d6-93df-8f6ff1fd33b7\"\u003eHugo\u003c/a\u003e static site generator\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003eA server (with a shell access) to host the blog\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003eGit to publish the blog to the server (pushing the repo)\u003c/p\u003e","title":"Creating a blog with Aamu.app"},{"content":" Aamu.app database supports two APIs: one for submitting data into the database via standard HTML forms – this works just one direction. Also you can get and put data into the database via GraphQL.\nAs Wikipedia says it:\nGraphQL is an open-source data query and manipulation language.\nIt has a syntax for reading and writing the database. For testing it out, it is helpful to have a tool. I like Altair.\nTo use Altair or any similar tool you first need to setup it with the database endpoint and the database API key. The database endpoint is:\nhttps://api.aamu.app/api/v1/graphql/You can get the API key from your database settings.\nQuerying the databaseLet's assume we are using the database aamu-blog, which is the actual database which holds the blog posts you are reading now! The database looks like this in Aamu.app (at this moment in time there are only two rows, i.e. posts):\nIt has two tables: \"Blog post\" and \"Person\". Our GraphQL API will have these fields for this database (you can use for example Altair GraphQL client to see the database schema):\nSo, the GraphQL API will create two fields for each table, one for fetching a single item (by an ID), e.g. BlogPost and one (BlogPostCollection) for fetching many items (by some criteria you define).\nLet's see how to get a single item. This is the query:\nquery { BlogPost (slug: \"introduction-to-aamuapp-graphql\") { id created_at updated_at title slug description body status } }When you do the query, you will get the data back (if it exists) as json:\n{ \"data\": { \"BlogPost\": { \"id\": \"3cfa30f8-ab29-459a-ad91-0651ae0b08ad\", \"created_at\": \"2021-10-19T19:11:49.257Z\", \"updated_at\": \"2024-03-09T07:38:23.916Z\", \"title\": \"Introduction to Aamu.app GraphQL\", \"slug\": \"introduction-to-aamuapp-graphql\", \"description\": \"How to use the database from a distance\", \"body\": \"Aamu.app database supports two APIs: one for submitting data into the database via standard html forms – this works just one direction. Also you can get and put data into the database via GraphQL.\" ... etcYou can also get items by querying the field BlogPostCollection. This gives you multiple rows. You can also do filtering, sorting and pagination.\nLet's see how getting multiple posts goes. Let's get all the blog posts that are published (status is \"published\") and the results will be sorted by creation date (older first):\nquery { BlogPostCollection( filter: { status: { EQ: \"published\" } } sort: { created_at: DESC } ) { title slug created_at description } }This will give the following results:\n{ \"data\": { \"BlogPostCollection\": [ { \"title\": \"Introduction to Aamu.app GraphQL\", \"slug\": \"introduction-to-aamuapp-graphql\", \"created_at\": \"2021-10-19T09:00:00.000Z\", \"description\": \"How to use the database from a distance\" }, { \"title\": \"Introduction to Aamu.app\", \"slug\": \"introduction-to-aamu-app\", \"created_at\": \"2021-10-10T09:00:00.000Z\", \"description\": \"Aamu.app is an all-in-one productivity tool\" } ] } }You can use other filtering methods, for example GT (Greater Than):\nquery { BlogPostCollection( filter: { status: { EQ: \"published\" } updated_at: { GT: \"2022-01-04T02:15:37.975Z\" } } ) { id created_at updated_at title slug description body heroImage { url } author { name } status tags } }This is the actual query which I'm using to create this blog you are reading. This will fetch all the updated blog posts since I ran this last time (since I built the blog last time). I'm using Hugo to create this blog, and the blog posts are in Aamu's database, and I'm writing this using the Aamu's Documents feature.\nNote that there is a field called heroImage, which has a subfield url. You can find all the fields with Altair's Docs feature. It will fetch database structure, and you will see all the fields that you can query (or mutate).\nWith Altair you can also see what kind of filtering you can do. For example, Altair sees that the updated field is a date and will give you the following filtering options:\nYou can get that list by pressing Ctrl-Space. You can also get similar lists in every spot in the query window – all the fields and filtering options will be easy to see.\nMutating the databaseHere we show at how we can mutate database rows.\nAt the moment you can mutate single objects, which are targeted with the id.\nHere we update a database row in our Person table. We will target the row that we want to change with the id field. In Aamu.app, the id field is a string, and you can find the correct id by first querying the persons, possibly with some criteria. Here is an example mutation query. It will change the title of the person and return some fields that we want to see about the person.\nmutation { Person(id: \"29940627-51e8-4fd0-82ab-d718ddfe802f\", title: \"Chief Procrastination Officer (CPO)\") { id created_at updated_at name bio title } }\n","permalink":"https://aamu.app/blog/posts/introduction-to-aamuapp-graphql/","summary":"\u003cp\u003eAamu.app database supports two APIs: one for submitting data into the database via standard HTML forms – this works just one direction. Also you can get and put data into the database via GraphQL.\u003c/p\u003e\u003cp\u003eAs Wikipedia says it:\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eGraphQL is an open-source data query and manipulation language.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eIt has a syntax for reading and writing the database. For testing it out, it is helpful to have a tool. I like Altair.\u003cbr\u003eTo use Altair or any similar tool you first need to setup it with the database endpoint and the database API key. The database endpoint is:\u003c/p\u003e","title":"Introduction to Aamu.app GraphQL"},{"content":"Working collaboratively can sometimes feel like a mess. Too many apps, scattered chats, docs and tasks all over the place. Aamu.app is here to change that. It’s an all-in-one tool that brings everything your team needs into one spot, so you can stop juggling and start getting stuff done.\nWhat Makes It Cool? Here’s why Aamu.app feels like a breath of fresh air ⛅️ :\nAamu.app contains the most often used (by metric chosen by me) SaaS apps in one package. It’s got tasks tracking (with different views like a kanban board, a synced calendar), chats and posts, document editing, video calls, a helpdesk, emails, graphic design, a form builder and even databases. And what’s more — you can use many of these together — compounding their usefulness.\nIt makes collaboration between all of these apps easy. One unified user interface, and basically one app.\nWhether you’re a tiny crew or a bigger group, it’s built to cut down on the chaos of using a bunch of different tools.\nPlus, it saves you from paying for a million separate subscriptions.\n💡 Pro-tip: if you are doing some long-term work in a document, you can always open a new tab, so you don’t have to interrupt the work in any place.\nFeatures So, let’s take a closer look at the features.\nBut before that, let me say that all the features work by using the keyboard only—you rarely need to touch the mouse, unless you want to, of course.\nAnd on top of that, all features and all the data is real-time, and every user can edit everything at the same time — the data is automatically synced in real-time, and you will always see the up-to-date version of any data, anywhere.\nSo, those features I promised:\nTasks: Keep track of what needs doing with a kanban board, a list, a calendar or a timeline. There exists an appropriate view for every occasion.\nWork Together, Live: Edit documents as a team without the “which version is this?” confusion. It even has Penpot 2.x built in—a free design tool—so you don’t need something like Figma.\nTalk Without the Noise: Chat in groups, post updates, or hop on a video call with LiveKit. It’s all there, no extra apps required.\nHelpdesk: Got customers? The helpdesk handles live chats and emails, making it easy to stay on top of “tickets”.\nDatabases for Anything: Use them for customer tracking, a website, a blog or whatever you need. With GraphQL, you can get the data out (or put it in if you so wish).\nA Form Builder: collect data with a form and store it into the Database.\nCombine them: This blog that you are reading has been written with the Docs and stored in the Database — and then built into the real site (with open source tools).\nPricing We are innovative here as well—you can pay what you want. Or more appropriately, what you think this is worth for you and how much you can afford to pay. From 0 to as much as you want.\nWe want to test if this model works. It feels fair to us, hopefully it proves to work.\nWhat About That Name? Aamu means “morning” in Finnish. I think it’s also quite a beautiful name. And it comes early in the alphabetic. It’s simple and distinctive. And most people start working in the morning (not me). 😆\nShould You Trust This Tool? Absolutely! As the founder, I bring years of experience as an entrepreneur and programmer. My earlier venture, Embed.rocks , has been reliably serving paying customers since 2016, demonstrating our commitment to quality and trust.\nWhat’s more, there are no major costs involved in running Aamu.app, so it can’t really go bankrupt.\nAt the moment the service is run by one person only, so that’s the biggest risk—if something were to happen to me. When possible, I will take care of this issue too.\n","permalink":"https://aamu.app/blog/posts/introduction-to-aamu-app/","summary":"\u003cp\u003eWorking collaboratively can sometimes feel like a mess. Too many apps, scattered chats, docs and tasks all over the place. Aamu.app is here to change that. It’s an all-in-one tool that brings everything your team needs into one spot, so you can stop juggling and start getting stuff done.\u003c/p\u003e\n\u003ch2 id=\"what-makes-it-cool\"\u003eWhat Makes It Cool?\u003c/h2\u003e\n\u003cp\u003eHere’s why Aamu.app feels like a breath of fresh air ⛅️ :\u003c/p\u003e\n\u003cp\u003eAamu.app contains the most often used (by metric chosen by me) SaaS apps in one package. It’s got tasks tracking (with different views like a kanban board, a synced calendar), chats and posts, document editing, video calls, a helpdesk, emails, graphic design, a form builder and even databases. And what’s more — you can use many of these together — compounding their usefulness.\u003c/p\u003e","title":"Introduction to Aamu.app"}]